// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions(user_id, session_token, expires_at) VALUES ($1,$2, $3)
RETURNING id, user_id, session_token, expires_at, created_at
`

type CreateSessionParams struct {
	UserID       int32            `json:"user_id"`
	SessionToken string           `json:"session_token"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.SessionToken, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(email, password) VALUES ($1, $2)
RETURNING id, email, created_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID        int32            `json:"id"`
	Email     string           `json:"email"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions WHERE expires_at < $1
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context, expiresAt pgtype.Timestamp) error {
	_, err := q.db.Exec(ctx, deleteExpiredSessions, expiresAt)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE session_token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.Exec(ctx, deleteSession, sessionToken)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM sessions WHERE user_id = $1
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserSessions, userID)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT
    s.id,
    s.user_id,
    s.session_token,
    s.expires_at,
    s.created_at,
    u.id as user_id,
    u.email,
    u.created_at as user_created_at
FROM sessions s
JOIN users u ON s.user_id = u.id
WHERE s.session_token = $1 AND s.expires_at > $2
`

type GetSessionByTokenParams struct {
	SessionToken string           `json:"session_token"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

type GetSessionByTokenRow struct {
	ID            int32            `json:"id"`
	UserID        int32            `json:"user_id"`
	SessionToken  string           `json:"session_token"`
	ExpiresAt     pgtype.Timestamp `json:"expires_at"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UserID_2      int32            `json:"user_id_2"`
	Email         string           `json:"email"`
	UserCreatedAt pgtype.Timestamp `json:"user_created_at"`
}

func (q *Queries) GetSessionByToken(ctx context.Context, arg GetSessionByTokenParams) (GetSessionByTokenRow, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, arg.SessionToken, arg.ExpiresAt)
	var i GetSessionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UserID_2,
		&i.Email,
		&i.UserCreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, created_at FROM users WHERE id = $1
`

type GetUserByIdRow struct {
	ID        int32            `json:"id"`
	Email     string           `json:"email"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const getUserSessions = `-- name: GetUserSessions :many
SELECT id, user_id, session_token, expires_at, created_at FROM sessions WHERE user_id = $1 AND expires_at > $2 ORDER BY created_at DESC
`

type GetUserSessionsParams struct {
	UserID    int32            `json:"user_id"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) GetUserSessions(ctx context.Context, arg GetUserSessionsParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, getUserSessions, arg.UserID, arg.ExpiresAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SessionToken,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
