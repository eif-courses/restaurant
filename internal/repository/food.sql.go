// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: food.sql

package repository

import (
	"context"
)

const getAllFood = `-- name: GetAllFood :many
select id, name, price from foods order by name
`

func (q *Queries) GetAllFood(ctx context.Context) ([]Food, error) {
	rows, err := q.db.Query(ctx, getAllFood)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Food{}
	for rows.Next() {
		var i Food
		if err := rows.Scan(&i.ID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertFood = `-- name: InsertFood :one
INSERT INTO foods (name, price) VALUES ($1, $2)
RETURNING id, name, price
`

type InsertFoodParams struct {
	Name  string  `json:"name"`
	Price float64 `json:"price"`
}

func (q *Queries) InsertFood(ctx context.Context, arg InsertFoodParams) (Food, error) {
	row := q.db.QueryRow(ctx, insertFood, arg.Name, arg.Price)
	var i Food
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}
